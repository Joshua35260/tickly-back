// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"] // Used for exclude fields from objects 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  role  String @id @db.VarChar(50)
  users User[] @relation("UserRoles") //0,n
}

model Structure {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  type       String?   @db.VarChar(100)
  service    String?   @db.VarChar(100)
  email      String    @db.VarChar(100)
  phone      String    @db.VarChar(20)
  users      User[]    @relation("UserStructures") //0,n
  addressId  Int //1/1
  address    Address   @relation(fields: [addressId], references: [id]) //1/1
  avatarId   Int? // Foreign key vers Media
  avatar     Media?    @relation("StructureAvatar") // Supprime fields et references pour éviter l'erreur
  avatarUrl  String?   @db.VarChar(500)
  tickets    Ticket[]  @relation("StructureTickets")
  archivedAt DateTime?
}

model Address {
  id         Int         @id @default(autoincrement())
  country    String      @db.VarChar(100)
  postcode   String      @db.VarChar(20)
  city       String      @db.VarChar(100)
  streetL1   String      @db.VarChar(255)
  streetL2   String?     @db.VarChar(255)
  longitude  Decimal?    @db.Decimal(9, 6)
  latitude   Decimal?    @db.Decimal(9, 6)
  users      User[] //0,n
  structures Structure[] //0,n
}

model User {
  id              Int         @id @default(autoincrement())
  firstname       String      @db.VarChar(50)
  lastname        String      @db.VarChar(50)
  login           String      @unique @db.VarChar(100)
  password        String      @db.VarChar(100)
  roles           Role[]      @relation("UserRoles") // 0,n
  email           String      @db.VarChar(100)
  phone           String?     @db.VarChar(20)
  structures      Structure[] @relation("UserStructures") //0,n
  addressId       Int //1,1
  address         Address     @relation(fields: [addressId], references: [id]) // 1,1
  AuditLog        AuditLog[] //0,n
  ticketsAssigned Ticket[]    @relation("AssignedUsers")
  ticketsAuthored Ticket[]    @relation("AuthorTickets")
  comments        Comment[]
  avatarId        Int? // Foreign key vers Media
  avatar          Media?      @relation("UserAvatar")
  avatarUrl       String?     @db.VarChar(500)
  archivedAt      DateTime?

  @@index([firstname])
  @@index([lastname])
}

model Ticket {
  id            Int        @id @default(autoincrement())
  title         String?    @db.VarChar(50)
  description   String     @db.VarChar(2000)
  createdAt     DateTime   @default(now()) // Date générée automatiquement à la création
  updatedAt     DateTime   @updatedAt //Date mise à jour automatiquement lors de chaque modification, (set sur creation_date à la création du ticket)
  archivedAt    DateTime?
  status        String     @db.VarChar(50)
  priority      String     @db.VarChar(50)
  category      String[]
  assignedUsers User[]     @relation("AssignedUsers") //0,n
  // Relation avec un seul utilisateur en tant qu'auteur du ticket
  authorId      Int
  author        User       @relation("AuthorTickets", fields: [authorId], references: [id]) // Un ticket a un seul auteur
  comments      Comment[]  @relation("TicketComments")
  // Relation avec Media (plusieurs médias peuvent être liés à plusieurs tickets)
  medias        Media[]    @relation("TicketMedia")
  structureId   Int? // Clé étrangère vers une Structure (0 ou 1)
  structure     Structure? @relation("StructureTickets", fields: [structureId], references: [id]) // Relation optionnelle à une structuree

  // Indexes
  @@index([status])
  @@index([category])
  @@index([priority])
  @@index([authorId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String    @db.VarChar(2000)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  readAt    DateTime? // optionel
  // Foreign key relationship to Ticket
  ticketId  Int
  ticket    Ticket    @relation("TicketComments", fields: [ticketId], references: [id])
  // Auteur du commentaire
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id]) // L'utilisateur qui a écrit le commentaire
  // Relation avec Media (un Commentaire peut avoir un seul Media)
  mediaId   Int? // Foreign key vers Media
  media     Media?    @relation("CommentMedia")
  mediaUrl  String?   @db.VarChar(500)
}

model AuditLog {
  id               Int             @id @default(autoincrement())
  userId           Int // Lien vers l'utilisateur qui a effectué l'action
  user             User            @relation(fields: [userId], references: [id]) //1,1
  linkedId         Int // ID de l'entité liée (Ticket, User, etc.)
  linkedTable      String // Nom de la table liée
  action           String // Action effectuée (CREATE, UPDATE, DELETE)
  fields           AuditLogValue[] // Liste des champs modifiés
  modificationDate DateTime // Date de la modification

  @@index([linkedId, linkedTable]) // Index pour accélérer les requêtes
}

model AuditLogValue {
  id            Int      @id @default(autoincrement())
  auditLogId    Int // Lien vers le log d'audit
  auditLog      AuditLog @relation(fields: [auditLogId], references: [id])
  field         String
  previousValue String?
  newValue      String
}

model Media {
  id       Int    @id @default(autoincrement())
  filename String @db.VarChar(255)
  typemime String @db.VarChar(100)
  url      String @default("") @db.VarChar(500)

  // Relation avec Ticket (plusieurs médias peuvent être liés à plusieurs tickets)
  tickets Ticket[] @relation("TicketMedia")

  // Relation avec Comment (un média peut être lié à un seul commentaire 0-1)
  commentId Int?     @unique // Foreign key vers User (avec @unique pour relation 1-1)
  comment   Comment? @relation("CommentMedia", fields: [commentId], references: [id])

  // Relation pour les avatars de User et Structure
  userAvatarId Int?  @unique // Foreign key vers User (avec @unique pour relation 1-1)
  userAvatar   User? @relation("UserAvatar", fields: [userAvatarId], references: [id])

  structureAvatarId Int?       @unique // Foreign key vers Structure (avec @unique pour relation 1-1)
  structureAvatar   Structure? @relation("StructureAvatar", fields: [structureAvatarId], references: [id])
}
