name: Deploy to VPS

on:
  push:
    branches:
      - main  # ou master selon votre workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Build Docker image
        run: |
          docker build -f Dockerfile.prod \
            --build-arg POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            --build-arg POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --build-arg POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            --build-arg POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
            --build-arg POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
            --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --build-arg NODE_ENV=production \
            -t djosh35/tickly-back:${{ github.sha }} .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image to Docker Hub
        run: |
          docker tag djosh35/tickly-back:${{ github.sha }} djosh35/tickly-back:latest
          docker push djosh35/tickly-back:${{ github.sha }}
          docker push djosh35/tickly-back:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy to VPS using Docker Compose
        run: |
          sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            cd /root/tickly/
            docker-compose -f docker-compose.prod.yml down  # Stoppe et supprime l'ancien conteneur
            docker-compose -f docker-compose.prod.yml pull  # Tirez la dernière image
            docker-compose -f docker-compose.prod.yml up -d  # Démarre le nouveau conteneur
            docker-compose -f docker-compose.prod.yml ps  # Vérifie l'état des conteneurs
          EOF
